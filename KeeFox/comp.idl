/*
  KeeFox - Allows Firefox to communicate with KeePass (via the KeeICE KeePass-plugin)
  Copyright 2008 Chris Tomlinson <keefox@christomlinson.name>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include "nsISupports.idl"
#include "nsILoginInfo.idl"
//#include "nsILoginManagerStorage.idl"

[scriptable, function, uuid(7ed5ba34-1375-4887-86fd-0682ddfaa870)]
interface kfILoginInfo : nsILoginInfo {
  //void callBackToKeeFoxJS(in long word);
};




[scriptable, function, uuid(7ed5ba34-1375-4887-86fd-0682ddfaa872)]
interface KeeFoxObserver : nsISupports {
  void callBackToKeeFoxJS(in long word);
};

[scriptable, uuid(7ed5ba34-1375-4887-86fd-0682ddfaa871)]
interface IKeeFox : nsISupports
{
	boolean checkVersion(in float keeFoxVersion, in float keeICEVersion, out long result); 
	void addObserver(in KeeFoxObserver observer);
  long add(in long a, in long b);
  AString getDBName();
  attribute AString name;


  
  /**
     * Store a new login.
     *
     * @param aLogin
     *        The login to be added.
     */
    void addLogin(in kfILoginInfo aLogin);


    /**
     * Remove a login from the login manager.
     *
     * @param aLogin
     *        The login to be removed.
     */
    void removeLogin(in kfILoginInfo aLogin);


    /**
     * Modify an existing login in the login manager.
     *
     * @param aLogin
     *        The login to be modified.
     */
    void modifyLogin(in kfILoginInfo oldLogin, in kfILoginInfo newLogin);
  
  /**
     * Fetch all logins in the login manager. An array is always returned;
     * if there are no logins the array is empty.
     *
     * @param count
     *        The number of elements in the array. JS callers can simply use
     *        the array's .length property, and supply an dummy object for
     *        this out param. For example: |getAllLogins({})|
     * @param logins
     *        An array of nsILoginInfo objects. 
     *
     * NOTE: This can be called from JS as:
     *       var logins = pwmgr.getAllLogins({});
     *       (|logins| is an array).
     */
    void getAllLogins(out unsigned long count,
                      [retval, array, size_is(count)] out kfILoginInfo logins);

  /**
     * Search for logins matching the specified criteria. Called when looking
     * for logins that might be applicable to a form or authentication request.
     *
     * @param count
     *        The number of elements in the array. JS callers can simply use
     *        the array's .length property, and supply an dummy object for
     *        this out param. For example: |findLogins({}, hostname, ...)|
     * @param aHostname
     *        The hostname to restrict searches to, in URL format. For
     *        example: "http://www.site.com".
     * @param aActionURL
     *        For form logins, this argument should be the URL to which the
     *        form will be submitted. For protocol logins, specify null.
     * @param aHttpRealm
     *        For protocol logins, this argument should be the HTTP Realm
     *        for which the login applies. This is obtained from the
     *        WWW-Authenticate header. See RFC2617. For form logins,
     *        specify null.
     * @param logins
     *        An array of nsILoginInfo objects. 
     *
     * NOTE: This can be called from JS as:
     *       var logins = pwmgr.findLogins({}, hostname, ...);
     *
     */
    void findLogins(out unsigned long count, in AString aHostname,
                    in AString aActionURL,   in AString aHttpRealm,
                    [retval, array, size_is(count)] out kfILoginInfo logins);


  /**
    * Search for logins matching the specified criteria, as with
    * findLogins(). This interface only returns the number of matching
    * logins (and not the logins themselves), which allows a caller to
    * check for logins without causing the user to be prompted for a master
    * password to decrypt the logins.
    *
    * @param aHostname
    *        The hostname to restrict searches to. Specify an empty string
    *        to match all hosts. A null value will not match any logins, and
    *        will thus always return a count of 0.
    * @param aActionURL
    *        The URL to which a form login will be submitted. To match any
    *        form login, specify an empty string. To not match any form
    *        login, specify null.
    * @param aHttpRealm
    *        The HTTP Realm for which the login applies. To match logins for
    *        any realm, specify an empty string. To not match logins for any
    *        realm, specify null.
    */
   unsigned long countLogins(in AString aHostname, in AString aActionURL,
                             in AString aHttpRealm);
  //CountLogins(nsAString const &aHostname, nsAString const &aActionURL,
	//nsAString const &aHttpRealm, unsigned int *_retval);
  
};

//interface IKeeFox : nsILoginManagerStorage

